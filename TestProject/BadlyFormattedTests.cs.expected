//  Copyright (c) rubicon IT GmbH
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using NUnit.Framework;
using TestProject.TestClasses;
using TestProject.TestInterfaces;
using Rhino.Mocks;
using Moq;
using Moq.Protected;
using MockRepository = Rhino.Mocks.MockRepository;

namespace TestProject
{
[TestFixture]
public class BadlyFormattedTests
{
  private readonly TestClass _memberCaller=new TestClass();
  private Mock<ITestInterface> _mock = new Mock<ITestInterface>();

          [SetUp]
  public void SetUp ()
  {
    var mock = new Mock<ITestInterface>();

    Console   .   WriteLine ("Test")         ;
  }

          public void AnyTest ()
          {
Page namingContainer = new Page();
            var parentControlMock = new Mock<IControl>() { CallBase = true };
            var childControlMock    =    new Mock<IControl>() { CallBase = true };

            var sequence = new MockSequence();
            childControlMock.InSequence (sequence).Protected().Setup ("OnInit", true, EventArgs.Empty).Verifiable();
            parentControlMock.InSequence (sequence).Protected().Setup ("OnInit", true, EventArgs.Empty).Verifiable();

         namingContainer.  Controls.  Add (parentControlMock.Object);
      parentControlMock.Object.Controls.      Add (childControlMock.Object);
  _memberCaller.InitRecursive       (parentControlMock.Object, namingContainer);

parentControlMock.Verify();
childControlMock.Verify();
}

}
}