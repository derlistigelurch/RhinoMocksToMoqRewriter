//  Copyright (c) rubicon IT GmbH
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using NUnit.Framework;
using Rhino.Mocks;
using TestProject.TestClasses;
using TestProject.TestInterfaces;
using Moq;
using Moq.Protected;
using MockRepository = Rhino.Mocks.MockRepository;

namespace TestProject
{
  [TestFixture]
  public class SimpleTest
  {
    private Mock<ITestInterface> _mock1;
    private Mock<ITestInterface> _mock2;
    private ITestInterface _sut = new TestClass();

    [SetUp]
    public void Setup ()
    {
    }

    [Test]
    public void Rewrite_MockInstantiation ()
    {
      _ = new Mock<ITestInterface>();
      _ = new Mock<ITestInterface>();
      _ = new Mock<ITestInterface> (MockBehavior.Strict);
      _ = new Mock<ITestInterface>() { CallBase = true };

      _ = new Mock<ITestInterface>();
      _ = new Mock<ITestInterface>();
      _ = new Mock<ITestInterface> (MockBehavior.Strict);
      _ = new Mock<ITestInterface> (MockBehavior.Strict);
      _ = new Mock<ITestInterface>();
      _ = new Mock<ITestInterface>() { CallBase = true };
      _ = new Mock<ITestInterface>() { CallBase = true };

      Assert.Pass();
    }

    [Test]
    public void Rewrite_VerifyAll ()
    {
      _mock1 = new Mock<ITestInterface> (MockBehavior.Strict);
      _mock2 = new Mock<ITestInterface>();

      _mock1.Verify();
      _mock2.Verify();

      Assert.Pass();
    }

    [Test]
    public void Rewrite_VerifyAllExpectations ()
    {
      _mock1.Verify();

      Assert.Pass();
    }

    [Test]
    public void Rewrite_AssertWasCalled ()
    {
      _mock1.Verify (_ => _.Read(), Times.AtLeastOnce());

      Assert.Pass();
    }

    [Test]
    public void Rewrite_AssertWasNotCalled ()
    {
      _mock1.Verify (_ => _.Read(), Times.Never());

      Assert.Pass();
    }

    [Test]
    public void Rewrite_RepeatAny ()
    {
      _mock1.Setup (m => m.Read (null)).Verifiable();

      _mock1.Verify();

      Assert.Pass();
    }

    public void Rewrite_RepeatOnce ()
    {
      _mock1.Setup (m => m.Read (null)).Verifiable();

      _sut.Read();

      _mock1.Verify (m => m.Read (null), Times.Once());

      Assert.Pass();
    }

    [Test]
    public void Rewrite_RepeatAtLeastOnce ()
    {
      _mock1.Setup (m => m.Read (null)).Verifiable();

      _mock1.Verify (m => m.Read (null), Times.AtLeastOnce());

      Assert.Pass();
    }

    [Test]
    public void Rewrite_RepeatTwice ()
    {
      _mock1.Setup (m => m.Read (null)).Verifiable();

      _mock1.Verify (m => m.Read (null), Times.Exactly (2));

      Assert.Pass();
    }

    [Test]
    public void Rewrite_RepeatNever ()
    {
      _mock1.Setup (m => m.Read (null)).Verifiable();

      _mock1.Verify (m => m.Read (null), Times.Never());

      Assert.Pass();
    }

    [Test]
    public void Rewrite_RepeatTimes ()
    {
      _mock1.Setup (m => m.Read (null)).Verifiable();

      _mock1.Verify (m => m.Read (null), Times.Exactly (3));

      Assert.Pass();
    }

    [Test]
    public void Rewrite_Ordered ()
    {
      var sequence = new MockSequence();
      _mock1.InSequence (sequence).Setup (_ => _.Read()).Returns (true).Verifiable();
      _mock2.InSequence (sequence).Setup (_ => _.Read()).Returns (false).Verifiable();

      Assert.Pass();
    }

    [Test]
    public void Rewrite_MethodDeletion ()
    {
      Assert.Pass();
    }

    [Test]
    public void Rewrite_IgnoreArguments ()
    {
      _mock1.Setup (m => m.Read (It.IsAny<ITestInterface>())).Verifiable();

      Assert.Pass();
    }

    [Test]
    public void Rewrite_LastCall ()
    {
      _mock1.Setup (_ => _.Read (It.Is<ITestInterface> (_ => _ != null))).Verifiable();

      Assert.Pass();
    }

    [Test]
    public void Rewrite_SetupResultFor ()
    {
      _mock1.Setup (_ => _.A).Returns (42).Verifiable();

      Assert.Pass();
    }

    [Test]
    public void Rewrite_MockSetup ()
    {
      IControl control = null;

      _mock1.Setup (_ => _.Read()).Returns (true).Verifiable();
      _mock1.Setup (_ => _.InitRecursive (control, It.IsNotNull<Page>())).Verifiable();
      _mock1.Setup (_ => _.Read()).Returns (true).Verifiable();

      Assert.Pass();
    }

    [Test]
    public void Rewrite_StrictMockWithoutVerify ()
    {
      var strictMock = new Mock<ITestInterface> (MockBehavior.Strict);
      strictMock.Setup (m => m.Read (null)).Returns (true).Verifiable();

      Assert.Pass();
    }

    [Test]
    public void Rewrite_StubWithRepeat ()
    {
      var stub = new Mock<ITestInterface>();
      stub.Setup (m => m.Read (null)).Returns (true);

      Assert.Pass();
    }
  }
}